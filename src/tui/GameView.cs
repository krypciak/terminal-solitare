//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.17.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

using Terminal.Gui;

namespace solitare
{
    public partial class GameView
    {

        private DeckViewFinal[] finalDeckViews;
        private DeckViewInitial[] initialDeckViews;
        private DeckViewReserve reserveDeckView;
        private ReserveView reserveNextButton;

        public static IDeckView selectedDeck = null;
        public static CardView selectedCard = null;

        private int invalidMoveCount = 0;

        private void AttachShortcutToView(View view, Key key, Action action)
        {
            var shourtcut = new Shortcut
            {
                Title = "",
                Key = key,
                HighlightStyle = HighlightStyle.Hover,
                X = view.X,
                Y = view.Y - 1,
                CanFocus = false,
                Action = () =>
                {
                    action();
                    view.InvokeCommand(Command.Select);
                    view.InvokeCommand(Command.Accept);
                },
            };
            this.Add(shourtcut);
        }

        private void AttachShortcutToDeckView<T>(DeckView<T> deckView, Key key) where T : Deck
        {
            AttachShortcutToView(deckView, key, () =>
            {
                if (GameView.selectedCard == null)
                {
                    GameView.selectedCard = deckView.cardViews.Count == 0 ? null : deckView.cardViews.Peek();
                }
            });
        }

        public GameView(GameState gameState)
        {
            FullRedraw(gameState);
        }

        public void FullRedraw(GameState gameState)
        {
            this.RemoveAll();
            InitializeComponent();

            var initialDeckY = 4;
            initialDeckViews = gameState.initialDecks.Select((deck, i) =>
            {
                var deckView = new DeckViewInitial(deck, Pos.Absolute(3 + (i * (CardView.width + 1))), Pos.Absolute(initialDeckY));
                this.Add(deckView);

                Key[] keyMap = { Key.Q, Key.W, Key.E, Key.R, Key.T, Key.Y, Key.U, Key.I, };
                AttachShortcutToDeckView(deckView, keyMap[i]);

                return deckView;
            }
            ).ToArray();

            var finalDeckY = initialDeckY + CardView.height + 14 + 3;
            finalDeckViews = gameState.finalDecks.Select((deck, i) =>
            {
                var deckView = new DeckViewFinal(deck, Pos.Absolute(3 + (i * (CardView.width + 1))), Pos.Absolute(finalDeckY));
                this.Add(deckView);

                Key[] keyMap = { Key.A, Key.S, Key.D, Key.F, };
                AttachShortcutToDeckView(deckView, keyMap[i]);

                return deckView;
            }
            ).ToArray();

            var reserveNextX = 50;
            reserveNextButton = new ReserveView(
                    reserveNextX,
                    finalDeckY,
                    (s, e) => reserveDeckView.NextCard()
            );
            this.Add(reserveNextButton);
            AttachShortcutToView(reserveNextButton, Key.G, () => { });


            reserveDeckView = new DeckViewReserve(
                    gameState.reserveDeck,
                    Pos.Absolute(reserveNextX + CardView.width + 1),
                    Pos.Absolute(finalDeckY),
                    (isEmpty) => reserveNextButton.SetEmpty(isEmpty));
            this.Add(reserveDeckView);
            AttachShortcutToDeckView(reserveDeckView, Key.H);
        }
    }
}
