//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.17.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

using Terminal.Gui;

namespace solitare
{
    public partial class GameView
    {
        private Game game;
        private DeckViewFinal[] finalDeckViews;
        private DeckViewInitial[] initialDeckViews;
        private DeckViewReserve reserveDeckView;
        private ReserveView reserveNextButton;

        private DeckView selectedDeck = null;
        private CardView selectedCard = null;

        private int invalidMoveCount = 0;

        private void AttachShortcutToView(View view, Key key, Action action)
        {
            var shourtcut = new Shortcut
            {
                Title = "",
                Key = key,
                HighlightStyle = HighlightStyle.Hover,
                X = view.X,
                Y = view.Y - 1,
                CanFocus = false,
                Action = () =>
                {
                    action();
                    view.InvokeCommand(Command.Select);
                    view.InvokeCommand(Command.Accept);
                },
            };
            this.Add(shourtcut);
        }

        private void AttachShortcutToDeckView(DeckView deckView, Key key)
        {
            AttachShortcutToView(deckView, key, () =>
            {
                var card = deckView.IsEmpty() ? null : deckView.TopCardView();
                OnDeckViewClick(deckView, card);
            });
        }

        public GameView(Game game)
        {
            this.game = game;
            FullRedraw();

            game.OnDeckChange += (deck) =>
            {
                UpdateUndoShortcutText(game.GetStateHistoryLength());
                UpdateMoveCountText(game.state.moveCount);
            };
        }

        public void FullRedraw()
        {
            this.RemoveAll();
            InitializeComponent();

            var initialDeckY = 4;
            initialDeckViews = game.state.initialDecks.Select((deck, i) =>
            {
                var deckView = new DeckViewInitial(
                    deck,
                    Pos.Absolute(3 + (i * (CardView.WIDTH + 1))),
                    Pos.Absolute(initialDeckY),
                    game,
                    OnDeckViewClick
                );
                this.Add(deckView);

                Key[] keyMap = { Key.Q, Key.W, Key.E, Key.R, Key.T, Key.Y, Key.U, Key.I, };
                AttachShortcutToDeckView(deckView, keyMap[i]);

                return deckView;
            }
            ).ToArray();

            var finalDeckY = initialDeckY + CardView.HEIGHT + 14 + 3;
            finalDeckViews = game.state.finalDecks.Select((deck, i) =>
            {
                var deckView = new DeckViewFinal(
                    deck,
                    Pos.Absolute(3 + (i * (CardView.WIDTH + 1))),
                    Pos.Absolute(finalDeckY),
                    game,
                    OnDeckViewClick
                );
                this.Add(deckView);

                Key[] keyMap = { Key.A, Key.S, Key.D, Key.F, };
                AttachShortcutToDeckView(deckView, keyMap[i]);

                return deckView;
            }
            ).ToArray();

            var reserveNextX = 50;
            reserveNextButton = new ReserveView(reserveNextX, finalDeckY, game.NextReserveCard);
            this.Add(reserveNextButton);
            AttachShortcutToView(reserveNextButton, Key.G, () => { });

            reserveDeckView = new DeckViewReserve(
                game.state.reserveDeck,
                Pos.Absolute(reserveNextX + CardView.WIDTH + 1),
                Pos.Absolute(finalDeckY),
                game,
                OnDeckViewClick,
                reserveNextButton
            );
            this.Add(reserveDeckView);
            AttachShortcutToDeckView(reserveDeckView, Key.H);
        }

        private void OnDeckViewClick(DeckView deckView, CardView cardView)
        {
            if (selectedCard == null)
            {
                selectedCard = cardView;
            }

            if (selectedDeck == null)
            {
                if (!deckView.IsEmpty()) selectedDeck = deckView;
            }
            else if (selectedCard != null && selectedDeck != deckView)
            {
                selectedDeck.ClearFocus();

                var fromDeck = selectedDeck.deck;
                var toDeck = deckView.deck;

                var result = game.TryMoveCard(fromDeck, toDeck, selectedCard.card);

                if (result.IsFailed)
                {
                    var error = result.Errors[0].Message;
                    SetInvalidMoveMessage(error);
                }

                selectedDeck?.ClearFocus();
                selectedCard = null;
                selectedDeck = null;
            }
        }
    }
}
